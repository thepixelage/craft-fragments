{% extends '_layouts/cp.html' %}
{% import '_includes/forms' as forms %}

{% set crumbs = [
    {
        'label': "Fragments"|t('fragments'),
        'url': cpUrl('fragments'),
    },
    {
        'label': zone.name,
        'url': cpUrl('fragments/fragments/' ~ zone.handle),
    }
] %}

{% set title = "Edit Fragment"|t('fragments') %}

{% set redirectUrl = "fragments/fragments/#{fragmentType.handle}" %}
{% set canUpdateSource = true %}
{% set canDeleteSource = true %}
{% set saveSourceAction = 'fragments/fragments/save' %}
{% set deleteSourceAction = 'fragments/fragments/delete' %}

{% set saveSourceAction = saveSourceAction ?? null %}
{% set duplicateSourceAction = duplicateSourceAction ?? null %}
{% set deleteSourceAction = deleteSourceAction ?? null %}
{% set deleteForSiteAction = deleteForSiteAction ?? null %}
{% set revertSourceAction = revertSourceAction ?? null %}
{% set saveDraftAction = saveDraftAction ?? null %}
{% set publishDraftAction = publishDraftAction ?? applyDraftAction ?? null %}
{% set deleteDraftAction = deleteDraftAction ?? null %}

{% set isDraft = element.getIsDraft() %}
{% set isRevision = element.getIsRevision() %}
{% set isCurrent = not isDraft and not isRevision %}
{% set allSites = craft.app.isMultiSite ? element.getSupportedSites() : [element.siteId] %}
{% set allEditableSiteIds = craft.app.sites.getEditableSiteIds() %}
{% set propSiteIds = allSites|filter(s => s.propagate ?? true)|column(s => s.siteId ?? s) %}
{% set propEditableSiteIds = propSiteIds|intersect(allEditableSiteIds) %}
{% set isMultiSiteElement = craft.app.isMultiSite and allSites|length > 1 %}
{% set addlEditableSiteIds = allSites|column(s => s.siteId ?? s)|diff(propSiteIds)|intersect(allEditableSiteIds) %}
{% set canEditMultipleSites = isMultiSiteElement and (propEditableSiteIds|length > 1 or addlEditableSiteIds|length) %}
{% set isUnpublishedDraft = element.getIsUnpublishedDraft() %}

{# See if this is a new site that isnâ€™t supported by the source element yet #}
{% if isUnpublishedDraft %}
    {% set isNewlySupportedSite = true %}
{% elseif isDraft %}
    {% set isNewlySupportedSite = not element.find()
        .id(element.getSourceId())
        .siteId(element.siteId)
        .anyStatus()
        .exists() %}
{% else %}
    {% set isNewlySupportedSite = false %}
{% endif %}

{% set canDeleteDraft = isDraft and ((canDeleteDraft ?? false) or element.creatorId == currentUser.id) and deleteDraftAction %}
{% set canUpdateSource = canUpdateSource ?? false %}
{% set canDuplicateSource = canDuplicateSource ?? false %}
{% set canAddAnother = canAddAnother ?? false %}
{% set canDeleteSource = canDeleteSource ?? false %}
{% set canDeleteForSite = (canDeleteForSite ?? false) and deleteForSiteAction and
    canDeleteForSite and isMultiSiteElement and propSiteIds|length > 1 and
    ((isCurrent and canDeleteSource) or (isDraft and canDeleteDraft and isNewlySupportedSite)) %}
{% set canEdit = canEdit ?? (canUpdateSource or canDuplicateSource or canAddAnother or saveDraftAction) %}

{% set redirectUrl = redirectUrl ?? craft.app.config.general.getPostCpLoginRedirect() %}
{% set addAnotherRedirectUrl = addAnotherRedirectUrl ?? null %}
{% set hashedCpEditUrl = '{cpEditUrl}'|hash %}

{% if not isRevision %}
    {% set fullPageForm = true %}
{% endif %}

{% if isDraft %}
    {% do craft.app.session.authorize('previewDraft:' ~ element.draftId) %}
{% elseif isRevision %}
    {% do craft.app.session.authorize('previewRevision:' ~ element.revisionId) %}
{% else %}
    {% do craft.app.session.authorize('previewElement:' ~ element.id) %}
{% endif %}

{# If this is an unpublished draft, then we should only show status toggles if the
   user actually has permission to publish changes #}
{% set showStatusToggles = (showStatusToggles ?? true) and
    element.hasStatuses() and
    (not isUnpublishedDraft or canUpdateSource) %}

{% if not isDraft and not canUpdateSource %}
    {% set saveShortcut = false %}
{% elseif isCurrent and canUpdateSource %}
    {% set saveShortcutRedirect = '{cpEditUrl}' %}
{% endif %}

{% set form = element.getFieldLayout().createForm(element, isRevision or not canEdit) %}

{% if tabs is not defined %}
    {% set tabs = form.getTabMenu() %}
{% endif %}

{% set settingsHtml = (block('settings') ?? '')|trim %}

{% set formActions = [] %}
{% if isCurrent %}
    {% if canUpdateSource and saveSourceAction %}
        {% set formActions = formActions|push({
            label: 'Save and continue editing'|t('app'),
            redirect: hashedCpEditUrl,
            shortcut: true,
            retainScroll: true,
        }) %}
        {% if addAnotherRedirectUrl %}
            {% set formActions = formActions|push({
                label: 'Save and add another'|t('app'),
                redirect: addAnotherRedirectUrl|hash,
                shortcut: true,
                shift: true,
            }) %}
        {% endif %}
        {% if canDuplicateSource and duplicateSourceAction %}
            {% set formActions = formActions|push({
                label: 'Save as a new {type}'|t('app', {
                    type: element.lowerDisplayName(),
                }),
                action: duplicateSourceAction,
                redirect: hashedCpEditUrl,
            }) %}
        {% endif %}
    {% endif %}
    {% if canDeleteForSite %}
        {% set formActions = formActions|push({
            destructive: true,
            label: 'Delete {type} for this site'|t('app', {
                type: element.lowerDisplayName()
            }),
            action: deleteForSiteAction,
            redirect: (redirectUrl ~ '#')|hash,
            confirm: 'Are you sure you want to delete the {type} for this site?'|t('app', {
                type: element.lowerDisplayName(),
            }),
        }) %}
    {% endif %}
    {% if canDeleteSource and deleteSourceAction %}
        {% set formActions = formActions|push({
            destructive: true,
            label: 'Delete {type}'|t('app', {
                type: element.lowerDisplayName()
            }),
            action: deleteSourceAction,
            redirect: (redirectUrl ~ '#')|hash,
            confirm: 'Are you sure you want to delete this {type}?'|t('app', {
                type: element.lowerDisplayName(),
            }),
        }) %}
    {% endif %}
{% elseif isDraft %}
    {% if saveDraftAction %}
        {% set formActions = formActions|push({
            label: 'Save and continue editing'|t('app'),
            action: saveDraftAction,
            shortcut: true,
            retainScroll: true,
        }) %}
    {% endif %}
    {% if canUpdateSource and publishDraftAction and addAnotherRedirectUrl %}
        {% set formActions = formActions|push({
            label: 'Publish and add another'|t('app'),
            action: publishDraftAction,
            redirect: addAnotherRedirectUrl|hash,
            shortcut: true,
            shift: true,
            data: {
                autosave: false,
            },
        }) %}
    {% endif %}
    {% if canDeleteDraft %}
        {% if canDeleteForSite %}
            {% set formActions = formActions|push({
                destructive: true,
                label: 'Delete draft for this site'|t('app'),
                action: deleteForSiteAction,
                redirect: (redirectUrl ~ '#')|hash,
                confirm: 'Are you sure you want to delete the draft for this site?'|t('app'),
            }) %}
        {% endif %}
        {% set formActions = formActions|push({
            destructive: true,
            label: 'Delete draft'|t('app'),
            action: deleteDraftAction,
            redirect: isUnpublishedDraft ? redirectUrl|hash : hashedCpEditUrl,
            confirm: 'Are you sure you want to delete this draft?'|t('app'),
        }) %}
    {% endif %}
{% endif %}

{% block header %}
    <div class="flex flex-nowrap">
        {{ block('pageTitle') }}
        {{ block('contextMenu') }}
    </div>
    <div class="flex" id="action-buttons">
        {{ block('actionButton') }}
    </div>
{% endblock %}

{% block contextMenu %}
    {% if craft.app.getIsMultiSite() %}
        {% set urlFormat = url("fragments/fragments/#{zone.handle}/#{fragmentType.handle}/#{craft.app.request.getSegment(5)}/{handle}") %}
        {% include "_elements/sitemenu.html" with {
            siteIds: siteIds,
            selectedSiteId: element.siteId,
            urlFormat: urlFormat
        } only %}
    {% endif %}
{% endblock %}

{% block actionButton %}
    {% if isCurrent %}
        {% if saveDraftAction %}
            <div id="save-draft-btn-container">
                {% if canUpdateSource and saveSourceAction %}
                    <button type="button" id="save-draft-btn" class="btn">{{ 'Create a draft'|t('app') }}</button>
                {% else %}
                    <button type="submit" id="save-draft-btn" class="btn submit">{{ 'Create a draft'|t('app') }}</button>
                    {% if formActions|length %}
                        <button type="button" class="btn menubtn" aria-label="{{ 'Actions'|t('app') }}" data-icon="settings"></button>
                        {% include '_layouts/components/form-action-menu.twig' %}
                    {% endif %}
                {% endif %}
            </div>
        {% endif %}
        {% if canUpdateSource and saveSourceAction %}
            <div id="save-btn-container" class="btngroup submit">
                <button type="submit" class="btn submit">{{ 'Save'|t('app') }}</button>
                <button type="button" class="btn submit menubtn"></button>
                {% include '_layouts/components/form-action-menu.twig' %}
            </div>
        {% endif %}
    {% elseif isDraft %}
        {% if canUpdateSource and publishDraftAction %}
            <div id="publish-draft-btn-container">
                {{ tag('button', {
                    type: 'button',
                    class: ['btn', 'secondary', 'formsubmit'],
                    text: 'Publish draft'|t('app'),
                    title: forms.shortcutText('S', false, true),
                    data: {
                        action: publishDraftAction,
                        redirect: hashedCpEditUrl,
                    },
                }) }}
            </div>
        {% endif %}
        <div id="save-btn-container" class="btngroup submit">
            <button type="submit" class="btn submit">{{ 'Save draft'|t('app') }}</button>
            {% if canDeleteDraft %}
                <button type="button" class="btn submit menubtn"></button>
                {% include '_layouts/components/form-action-menu.twig' %}
            {% endif %}
        </div>
    {% elseif isRevision and canUpdateSource and revertSourceAction %}
        <form method="post" accept-charset="UTF-8">
            {{ csrfInput() }}
            {{ actionInput(revertSourceAction) }}
            {{ redirectInput('{cpEditUrl}') }}
            {{ hiddenInput('revisionId', element.revisionId) }}
            <div class="secondary-buttons">
                <button type="button" class="btn secondary formsubmit">{{ 'Revert {type} to this revision'|t('app', { type: element.lowerDisplayName() }) }}</button>
            </div>
        </form>
    {% endif %}
{% endblock %}

{% block main %}
    {% if not isRevision %}
        {# action and redirect params #}
        {% if isCurrent and canUpdateSource and saveSourceAction %}
            {# current revision -- user can update source #}
            {{ actionInput(saveSourceAction, {id: 'action'}) }}
        {% elseif isDraft and saveDraftAction %}
            {{ actionInput(saveDraftAction, {id: 'action'}) }}
        {% endif %}
        {{ redirectInput(redirectUrl) }}

        {# siteId param #}
        {% if craft.app.isMultiSite %}
            {{ hiddenInput('siteId', element.siteId) }}
        {% endif %}

        {# propagateAll param #}
        {% if isUnpublishedDraft and craft.app.request.getQueryParam('fresh') %}
            {{ hiddenInput('propagateAll', '1') }}
        {% endif %}
    {% endif %}
    {{ parent() }}
{% endblock %}

{% block content %}
    {{ hiddenInput('zoneId', zone.id) }}
    {{ hiddenInput('fragmentTypeId', fragmentType.id) }}
    {% if craft.app.getIsMultiSite() %}{{ hiddenInput('siteId', element.siteId) }}{% endif %}

    {% if not isRevision %}
        {{ hiddenInput('sourceId', element.getSourceId()) }}
    {% else %}
        {{ hiddenInput('revisionId', entry.revisionId) }}
    {% endif %}

    <div id="fields">
        {{ form.render()|raw }}
    </div>
{% endblock %}

{% block details %}
    {% if settingsHtml %}
        <div id="settings" class="meta">
            {{ settingsHtml|raw }}
        </div>
    {% endif %}

    {% if showStatusToggles and isMultiSiteElement %}
        <div class="meta">
            {{ forms.lightswitchField({
                status: element.getAttributeStatus('enabled'),
                label: 'Enabled for {site}'|t('app', { site: element.site.name|t('site')|e }) ~
                (canEditMultipleSites ? tag('button', {
                    type: 'button',
                    id: 'expand-status-btn',
                    class: ['btn'],
                    data: {
                        icon: 'ellipsis',
                    },
                })),
                id: "enabledForSite-#{element.siteId}",
                name: "enabledForSite[#{element.siteId}]",
                on: element.enabled and element.getEnabledForSite(),
                disabled: isRevision,
            }) }}
        </div>
    {% endif %}

    <div id="meta-details" class="meta read-only">
        {% block meta %}
            {% if element.hasStatuses() %}
                {% if isUnpublishedDraft %}
                    {% set statusColor = 'white' %}
                    {% set statusLabel = 'Draft'|t('app') %}
                {% else %}
                    {% set status = element.getStatus() %}
                    {% set statusDef = element.statuses()[status] ?? null %}
                    {% set statusColor = statusDef.color ?? status %}
                    {% set statusLabel = statusDef.label ?? statusDef ?? status|ucfirst %}
                {% endif %}
                <div class="data">
                    <h5 class="heading">{{ 'Status'|t('app') }}</h5>
                    <div id="status-value" class="value"><span class="status {{ statusColor }}"></span>{{ statusLabel }}</div>
                </div>
            {% endif %}
            <div class="data">
                <h5 class="heading">{{ "Created at"|t('app') }}</h5>
                <div id="date-created-value" class="value">{{ element.dateCreated|datetime('short') }}</div>
            </div>
            <div class="data">
                <h5 class="heading">{{ "Updated at"|t('app') }}</h5>
                <div id="date-updated-value" class="value">{{ element.dateUpdated|datetime('short') }}</div>
            </div>
            {% if isRevision %}
                {% set revisionNotes = element.revisionNotes %}
            {% elseif not isDraft and element.currentRevision %}
                {% set revisionNotes = element.currentRevision.revisionNotes %}
            {% else %}
                {% set revisionNotes = null %}
            {% endif %}
            {% if revisionNotes %}
                <div class="data">
                    <h5 class="heading">{{ "Notes"|t('app') }}</h5>
                    <div class="value">{{ revisionNotes }}</div>
                </div>
            {% endif %}
        {% endblock %}
    </div>

    {% if (isCurrent and (hasRevisions ?? false)) or isDraft %}
        {{ forms.textarea({
            id: 'notes',
            class: ['nicetext'],
            name: 'notes',
            placeholder: 'Notes about your changes'|t('app'),
            value: isCurrent ? (notes ?? null) : element.draftNotes,
            inputAttributes: {
                aria: {
                    label: 'Notes about your changes'|t('app'),
                },
            },
        }) }}
    {% endif %}

    {% if isDraft and element.getIsOutdated() %}
        {% do craft.app.session.authorize('mergeDraftSourceChanges:' ~ element.draftId) %}
        <div class="meta read-only warning">
            <p>{{ 'The source {type} has been updated recently.'|t('app', {type: element.lowerDisplayName()}) }}</p>
            <div class="flex flex-nowrap">
                {% if element.trackChanges %}
                    {{ tag('button', {
                        type: 'button',
                        id: 'merge-changes-btn',
                        class: ['btn'],
                        text: 'Merge changes into draft'|t('app'),
                    }) }}
                    <div id="merge-changes-spinner" class="spinner hidden"></div>
                {% endif %}
            </div>
        </div>
    {% endif %}
{% endblock %}

{% block settings %}
    {{ forms.textField({
        label: "Slug"|t('app'),
        siteId: element.siteId,
        id: 'slug',
        name: 'slug',
        autocorrect: false,
        autocapitalize: false,
        value: element.slug,
        placeholder: "Enter slug"|t('app'),
        errors: (element.getErrors('slug')|merge(element.getErrors('uri')))
    }) }}

    {% if showStatusToggles and not isMultiSiteElement %}
        {{ forms.lightswitchField({
            status: element.getAttributeStatus('enabled'),
            label: 'Enabled'|t('app'),
            id: 'enabled',
            name: 'enabled',
            on: element.enabled,
            disabled: isRevision,
        }) }}
    {% endif %}
{% endblock %}

{% if canEditMultipleSites and element.id %}
    {# get the element's statuses across all sites #}
    {% set siteStatusesQuery = element.find()
        .select(['elements_sites.siteId', 'elements_sites.enabled'])
        .id(element.id)
        .siteId(propEditableSiteIds)
        .anyStatus()
        .asArray() %}
    {% if isDraft %}
        {% do siteStatusesQuery.drafts() %}
    {% elseif isRevision %}
        {% do siteStatusesQuery.revisions() %}
    {% endif %}
    {% set siteStatuses = siteStatusesQuery
        .pairs()|map(s => s ? true : false) %}
{% elseif canEditMultipleSites %}
    {% set siteStatusValues = {} %}
    {% for siteId in propEditableSiteIds %}
        {% set siteStatusValues = siteStatusValues|merge([false]) %}
    {% endfor %}
    {% set siteStatuses = combine(propEditableSiteIds, siteStatusValues) %}
{% else %}
    {% set siteStatuses = {
        ("#{element.siteId}"): element.enabled ? true : false
    } %}
{% endif %}

{% set settings = {
    elementType: className(element),
    sourceId: element.getSourceId(),
    siteId: element.siteId,
    isUnpublishedDraft: isUnpublishedDraft,
    enabled: element.enabled ? true : false,
    enabledForSite: element.enabled and element.getEnabledForSite(),
    isLive: isCurrent and element.enabled and element.getEnabledForSite() and element.getRoute(),
    siteStatuses: siteStatuses,
    addlSiteIds: addlEditableSiteIds|values,
    cpEditUrl: element.cpEditUrl,
    draftId: element.draftId,
    revisionId: element.revisionId,
    draftName: isDraft ? element.draftName : null,
    canEditMultipleSites: canEditMultipleSites,
    canUpdateSource: canUpdateSource,
    saveDraftAction: saveDraftAction,
    deleteDraftAction: deleteDraftAction,
    publishDraftAction: publishDraftAction,
    hashedCpEditUrl: hashedCpEditUrl,
    hashedAddAnotherRedirectUrl: addAnotherRedirectUrl ? addAnotherRedirectUrl|hash : null,
    siteToken: not element.getSite().enabled ? element.siteId|hash,
} %}
{% js %}
    window.draftEditor = new Craft.DraftEditor({{ settings|json_encode|raw }});
{% endjs %}

{% if not element.slug %}
    {% js %}
        window.slugGenerator = new Craft.SlugGenerator('#title', '#slug', {
        charMap: {{ craft.cp.getAsciiCharMap(element.site.language)|json_encode|raw }}
        });
    {% endjs %}
{% endif %}
