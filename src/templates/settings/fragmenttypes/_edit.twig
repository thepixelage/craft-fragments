{% extends '_layouts/cp' %}
{% import "_includes/forms" as forms %}

{% set title = 'Create a new fragment type' %}
{% if fragmentType is defined and fragmentType %}
    {% set title = fragmentType.name %}
{% endif %}

{% set selectedSubnavItem = 'settings' %}

{% set crumbs = [
    {
        label: 'Fragments'|t('fragments'),
        url: url('fragments'),
    },
    {
        label: 'Settings'|t('fragments'),
        url: url('fragments/settings'),
    },
    {
        label: 'Fragment Types'|t('fragments'),
        url: url('fragments/settings/fragmenttypes'),
    },
] %}

{% set fullPageForm = true %}
{% set formActions = [
    fragmentType ?? false ? {
        label: 'Delete'|t('app'),
        action: 'fragments/fragment-types/delete-fragment-type',
        redirect: 'fragments/settings/fragmenttypes'|hash,
        destructive: true,
        confirm: 'Are you sure you want to delete “{name}”?'|t('app', {
            name: fragmentType.name,
        }),
    },
]|filter %}

{% block content %}
    {{ actionInput('fragments/fragment-types/save-fragment-type') }}
    {{ redirectInput('fragments/settings/fragmenttypes') }}
    {% if fragmentType is defined and fragmentType %}
        {{ hiddenInput('id', fragmentType.id) }}
    {% endif %}

    {{ forms.textField({
        first: true,
        label: "Name"|t('app'),
        instructions: "What this fragment type will be called in the control panel."|t('app'),
        id: 'name',
        name: 'name',
        value: fragmentType is defined ? fragmentType.name,
        errors: [],
        autofocus: true,
        required: true
    }) }}

    {{ forms.textField({
        label: "Handle"|t('app'),
        instructions: "How you’ll refer to this fragment type in the templates."|t('app'),
        id: 'handle',
        name: 'handle',
        class: 'code',
        autocorrect: false,
        autocapitalize: false,
        value: fragmentType is defined ? fragmentType.handle,
        errors: [],
        required: true
    }) }}

    <hr>

    {{ forms.fieldLayoutDesignerField({
        fieldLayout: fragmentType is defined ? fragmentType.getFieldLayout() : null
    }) }}
{% endblock %}

{% if fragmentType is not defined or fragmentType.handle is empty %}
    {% js "new Craft.HandleGenerator('#name', '#handle');" %}
{% endif %}
